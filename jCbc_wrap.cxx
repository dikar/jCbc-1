/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.5
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




#include <iostream>
#include <iomanip>
#include "omp.h"
#if defined(_WIN32) || defined(WIN32) 
#include "windows.h"
#endif
#include <algorithm>
#include "pthread.h"
#include "sched.h"
#include "semaphore.h"
#include "CbcEventHandler.hpp"
#include "CoinPragma.hpp"
#include "CoinPragma.hpp"
#include "CbcModel.hpp"
#include "CoinModel.hpp"
#include "OsiClpSolverInterface.hpp"
#include "OsiSolverInterface.hpp"
#include "CbcStrategy.hpp"
#include "CglPreProcess.hpp"
#include "CoinTime.hpp"
#include "CbcHeuristicDiveCoefficient.hpp"
#include "CbcHeuristicDiveFractional.hpp"
#include "CbcHeuristicDiveGuided.hpp"
#include "CbcHeuristicDiveVectorLength.hpp"
#include "CbcHeuristicDivePseudoCost.hpp"
#include "CbcHeuristicDiveLineSearch.hpp"
#include "CbcHeuristic.hpp"
#include "CoinError.hpp"
#include "OsiCuts.hpp"
#include "CglCutGenerator.hpp"
#include "CglGomory.hpp"
#include "CglProbing.hpp"
#include "CglKnapsackCover.hpp"
#include "CglOddHole.hpp"
#include "CglMixedIntegerRounding.hpp"
#include "CglTwomir.hpp"
#include "ClpSimplex.hpp"
#include "ClpPresolve.hpp"
#include "CoinHelperFunctions.hpp"
#include "CoinBuild.hpp"
#include "CbcBranchDynamic.hpp"
#include "CbcBranchDecision.hpp"
#include "CbcBranchDefaultDecision.hpp"
#include "CbcCutGenerator.hpp"
#include "CbcHeuristicLocal.hpp"
#include "CglRedSplit.hpp"
#include "CglClique.hpp"
#include "CglFlowCover.hpp"
#include "CglMixedIntegerRounding2.hpp"
#include "CglSimpleRounding.hpp"
#include "CbcHeuristicDINS.hpp"
#include "CbcHeuristicDive.hpp"
#include "CbcHeuristicDiveLineSearch.hpp"
#include "CbcHeuristicDivePseudoCost.hpp"
#include "CbcHeuristicDW.hpp"
#include "CbcHeuristicGreedy.hpp"
#include "CbcHeuristicPivotAndFix.hpp"
#include "CbcHeuristicRandRound.hpp"
#include "CbcHeuristicRENS.hpp"
#include "CbcHeuristicVND.hpp"
#include "CglGMI.hpp"
#include "CglRedSplit2.hpp"
#include "CglResidualCapacity.hpp"
#include "CglZeroHalf.hpp"
#include "CbcTreeLocal.hpp"
#include "CbcCompare.hpp"
#include "CbcBranchActual.hpp"
#include "ClpSolve.hpp"
#include "CoinWarmStart.hpp"
#include "CbcHeuristicFPump.hpp"
#include "CbcHeuristicRINS.hpp"




/* Put header files here or function declarations like below */
extern void addCol(CoinModel *build, double collb, double colub, double obj,const char *name, bool isInt);
extern void addRows(CbcModel *model, CoinModel *build);
extern void addRow(CoinModel *build, int numberInRow, int index [], double values [], double rowlb, double rowup, const char *name);
extern void branchAndBound(CbcModel * model);
extern void readMps(CbcModel *model, const char *name);
extern void readLp(CbcModel *model, const char *name);
extern void writeMps(CbcModel *model, const char *name);
extern void writeLp(CbcModel *model, const char *name);
extern const double * getSol(CbcModel *model);
extern void setInteger(CbcModel *model, int i);
extern void addRows(OsiClpSolverInterface *solver, CoinModel *build);
extern void assignSolver(CbcModel *model, OsiClpSolverInterface *solver);
extern void readMps(OsiClpSolverInterface *solver, const char *name);
extern void readLp(OsiClpSolverInterface *solver, const char *name);
extern void setInteger(OsiClpSolverInterface *solver, int i);
extern void initialSolve(OsiClpSolverInterface *solver);
extern void setLogLevel(OsiClpSolverInterface *solver, int i);
extern void setLogLevel(CbcModel * model, int i);
extern void solve(CbcModel *model, OsiClpSolverInterface *solver, int logLevel= 0);
extern void solve_1(CbcModel *model, OsiClpSolverInterface *solver, int logLevel= 0);
extern int solve_2(CbcModel *model, OsiClpSolverInterface *solver, int logLevel= 0);
extern int solve_3(CbcModel *model, OsiClpSolverInterface *solver, int logLevel= 0,double presolve_tolerance=1e-07);
extern void writeMps(OsiClpSolverInterface *solver, const char *name);
extern void writeLp(OsiClpSolverInterface *solver, const char *name);
extern int isInteger(OsiClpSolverInterface *solver, int i);
extern int isInteger(CbcModel * model, int i);
extern std::string getRowName(OsiClpSolverInterface *solver, int i);
extern std::string getColName(OsiClpSolverInterface *solver, int i);
extern std::string getRowName(CbcModel *model, int i);
extern std::string getColName(CbcModel *model, int i);
extern int getNumRows(OsiClpSolverInterface *solver);
extern int getNumCols(OsiClpSolverInterface *solver);
extern int getNumRows(CbcModel *model);
extern int getNumCols(CbcModel *model);
extern const double * getColSolution(OsiClpSolverInterface *solver);
extern const double * getRowPrice(OsiClpSolverInterface *solver);
extern const double * getRowActivity(OsiClpSolverInterface *solver);
extern const double * getReducedCost(OsiClpSolverInterface *solver);
extern const double * getColSolution(CbcModel *model);
extern const double * getRowPrice(CbcModel *model);
extern const double * getRowActivity(CbcModel *model);
extern const double * getReducedCost(CbcModel *model);
extern int  numberIntegers(CbcModel *model);
extern const double getObjValue(CbcModel *model);
extern int status(CbcModel *model);
extern int isProvenOptimal(CbcModel *model);
extern int isProvenInfeasible(CbcModel *model);
extern void setModelName(OsiClpSolverInterface *solver, std::string name);
extern std::string getModelName(OsiClpSolverInterface *solver);
extern int isBinary(OsiClpSolverInterface *solver, int i);
extern int secondaryStatus(CbcModel *model);
extern double getCoinCpuTime();
extern const double getObjValue(OsiClpSolverInterface *solver);
extern void setRowName(OsiClpSolverInterface *solver, int i , const char *name);
extern void setPrimalTolerance(CbcModel *model, double a);
extern void setDualTolerance(CbcModel *model, double a);
extern void setIntegerTolerance(CbcModel *model, double a);
extern int solve_whs(CbcModel *model, OsiClpSolverInterface *solver, std::string names[], int values[],int intvars,  int logLevel= 0,double presolve_tolerance=1e-07);
extern int getNumIntegers(OsiClpSolverInterface *solver);
extern void writeLp1(CbcModel *model, const char *name, double epsilon=1e-5, int decimals=5 );
extern void writeMps1(CbcModel *model, const char *name, int 	formatType = 0, int numberAcross = 2,double objSense = 0.0);
extern void callCbc(std::string a,CbcModel *model);
extern void setMaximumNodes(CbcModel *model, int value);
extern void setNumberThreads(CbcModel * model,int a);
extern void setThreadMode(CbcModel * model,int a);
extern void par_solve(CbcModel *model, OsiClpSolverInterface *solver, std::string s, std::string names[] = NULL, int values[]= NULL,int intvars= 0,std::string names1[]= NULL, int values1[]= NULL,int intvars1= 0,std::string names2[]= NULL, int values2[]= NULL,int intvars2= 0);
extern void cutoff(CbcModel *model, int n);
extern int solve_unified(CbcModel *model, OsiClpSolverInterface *solver, std::string names[] = NULL, int values[] = NULL, int intvars = 0, int logLevel= 0 );
extern double getMinRHS(OsiClpSolverInterface *solver);
extern double getMinCoeff(OsiClpSolverInterface *solver);
extern double getMaxCoeff(OsiClpSolverInterface *solver);



#include <stdexcept>


SWIGINTERN void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}


#include <stdexcept>


#include <utility>


#include <vector>
#include <stdexcept>


#include <string>


static double *new_jarray_double(int nelements) { 
  return new double[nelements](); 
}

static void delete_jarray_double(double *ary) { 
  delete [] ary; 
}

static double jarray_double_getitem(double *ary, int index) {
    return ary[index];
}
static void jarray_double_setitem(double *ary, int index, double value) {
    ary[index] = value;
}


static int *new_jarray_int(int nelements) { 
  return new int[nelements](); 
}

static void delete_jarray_int(int *ary) { 
  delete [] ary; 
}

static int jarray_int_getitem(int *ary, int index) {
    return ary[index];
}
static void jarray_int_setitem(int *ary, int index, int value) {
    ary[index] = value;
}


static std::string *new_jarray_string(int nelements) { 
  return new std::string[nelements](); 
}

static void delete_jarray_string(std::string *ary) { 
  delete [] ary; 
}

static std::string jarray_string_getitem(std::string *ary, int index) {
    return ary[index];
}
static void jarray_string_setitem(std::string *ary, int index, std::string value) {
    ary[index] = value;
}


static CbcModel *new_jCbcModel() { 
  return new CbcModel(); 
}

static CbcModel *copy_jCbcModel(CbcModel value) { 
  return new CbcModel(value); 
}

static void delete_jCbcModel(CbcModel *obj) { 
  if (obj) delete obj; 
}

static void jCbcModel_assign(CbcModel *obj, CbcModel value) {
  *obj = value;
}

static CbcModel jCbcModel_value(CbcModel *obj) {
  return *obj;
}


static CoinModel *new_jCoinModel() { 
  return new CoinModel(); 
}

static CoinModel *copy_jCoinModel(CoinModel value) { 
  return new CoinModel(value); 
}

static void delete_jCoinModel(CoinModel *obj) { 
  if (obj) delete obj; 
}

static void jCoinModel_assign(CoinModel *obj, CoinModel value) {
  *obj = value;
}

static CoinModel jCoinModel_value(CoinModel *obj) {
  return *obj;
}


static OsiClpSolverInterface *new_jOsiClpSolverInterface() { 
  return new OsiClpSolverInterface(); 
}

static OsiClpSolverInterface *copy_jOsiClpSolverInterface(OsiClpSolverInterface value) { 
  return new OsiClpSolverInterface(value); 
}

static void delete_jOsiClpSolverInterface(OsiClpSolverInterface *obj) { 
  if (obj) delete obj; 
}

static void jOsiClpSolverInterface_assign(OsiClpSolverInterface *obj, OsiClpSolverInterface value) {
  *obj = value;
}

static OsiClpSolverInterface jOsiClpSolverInterface_value(OsiClpSolverInterface *obj) {
  return *obj;
}


static CoinPackedMatrix *new_jCoinPackedMatrix() { 
  return new CoinPackedMatrix(); 
}

static CoinPackedMatrix *copy_jCoinPackedMatrix(CoinPackedMatrix value) { 
  return new CoinPackedMatrix(value); 
}

static void delete_jCoinPackedMatrix(CoinPackedMatrix *obj) { 
  if (obj) delete obj; 
}

static void jCoinPackedMatrix_assign(CoinPackedMatrix *obj, CoinPackedMatrix value) {
  *obj = value;
}

static CoinPackedMatrix jCoinPackedMatrix_value(CoinPackedMatrix *obj) {
  return *obj;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_src_jCbcJNI_new_1jarray_1double(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (double *)new_jarray_double(arg1);
  *(double **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_src_jCbcJNI_delete_1jarray_1double(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  double *arg1 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(double **)&jarg1; 
  delete_jarray_double(arg1);
}


SWIGEXPORT jdouble JNICALL Java_src_jCbcJNI_jarray_1double_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  double *arg1 = (double *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(double **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)jarray_double_getitem(arg1,arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_src_jCbcJNI_jarray_1double_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  double *arg1 = (double *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(double **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  jarray_double_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_src_jCbcJNI_new_1jarray_1int(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (int *)new_jarray_int(arg1);
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_src_jCbcJNI_delete_1jarray_1int(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  int *arg1 = (int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  delete_jarray_int(arg1);
}


SWIGEXPORT jint JNICALL Java_src_jCbcJNI_jarray_1int_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  int *arg1 = (int *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)jarray_int_getitem(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_src_jCbcJNI_jarray_1int_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
  int *arg1 = (int *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  jarray_int_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_src_jCbcJNI_new_1jarray_1string(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (std::string *)new_jarray_string(arg1);
  *(std::string **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_src_jCbcJNI_delete_1jarray_1string(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::string *arg1 = (std::string *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::string **)&jarg1; 
  delete_jarray_string(arg1);
}


SWIGEXPORT jstring JNICALL Java_src_jCbcJNI_jarray_1string_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  std::string *arg1 = (std::string *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::string **)&jarg1; 
  arg2 = (int)jarg2; 
  result = jarray_string_getitem(arg1,arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_src_jCbcJNI_jarray_1string_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jstring jarg3) {
  std::string *arg1 = (std::string *) 0 ;
  int arg2 ;
  std::string arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::string **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  jarray_string_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_src_jCbcJNI_new_1jCbcModel(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CbcModel *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CbcModel *)new_jCbcModel();
  *(CbcModel **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_src_jCbcJNI_copy_1jCbcModel(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  CbcModel arg1 ;
  CbcModel *argp1 ;
  CbcModel *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(CbcModel **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null CbcModel");
    return 0;
  }
  arg1 = *argp1; 
  result = (CbcModel *)copy_jCbcModel(arg1);
  *(CbcModel **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_src_jCbcJNI_delete_1jCbcModel(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CbcModel *arg1 = (CbcModel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  delete_jCbcModel(arg1);
}


SWIGEXPORT void JNICALL Java_src_jCbcJNI_jCbcModel_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  CbcModel *arg1 = (CbcModel *) 0 ;
  CbcModel arg2 ;
  CbcModel *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  argp2 = *(CbcModel **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null CbcModel");
    return ;
  }
  arg2 = *argp2; 
  jCbcModel_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_src_jCbcJNI_jCbcModel_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  CbcModel *arg1 = (CbcModel *) 0 ;
  CbcModel result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  result = jCbcModel_value(arg1);
  *(CbcModel **)&jresult = new CbcModel((const CbcModel &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_src_jCbcJNI_new_1jCoinModel(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CoinModel *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CoinModel *)new_jCoinModel();
  *(CoinModel **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_src_jCbcJNI_copy_1jCoinModel(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  CoinModel arg1 ;
  CoinModel *argp1 ;
  CoinModel *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(CoinModel **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null CoinModel");
    return 0;
  }
  arg1 = *argp1; 
  result = (CoinModel *)copy_jCoinModel(arg1);
  *(CoinModel **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_src_jCbcJNI_delete_1jCoinModel(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CoinModel *arg1 = (CoinModel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CoinModel **)&jarg1; 
  delete_jCoinModel(arg1);
}


SWIGEXPORT void JNICALL Java_src_jCbcJNI_jCoinModel_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  CoinModel *arg1 = (CoinModel *) 0 ;
  CoinModel arg2 ;
  CoinModel *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CoinModel **)&jarg1; 
  argp2 = *(CoinModel **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null CoinModel");
    return ;
  }
  arg2 = *argp2; 
  jCoinModel_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_src_jCbcJNI_jCoinModel_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  CoinModel *arg1 = (CoinModel *) 0 ;
  CoinModel result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CoinModel **)&jarg1; 
  result = jCoinModel_value(arg1);
  *(CoinModel **)&jresult = new CoinModel((const CoinModel &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_src_jCbcJNI_new_1jOsiClpSolverInterface(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OsiClpSolverInterface *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OsiClpSolverInterface *)new_jOsiClpSolverInterface();
  *(OsiClpSolverInterface **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_src_jCbcJNI_copy_1jOsiClpSolverInterface(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OsiClpSolverInterface arg1 ;
  OsiClpSolverInterface *argp1 ;
  OsiClpSolverInterface *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(OsiClpSolverInterface **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OsiClpSolverInterface");
    return 0;
  }
  arg1 = *argp1; 
  result = (OsiClpSolverInterface *)copy_jOsiClpSolverInterface(arg1);
  *(OsiClpSolverInterface **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_src_jCbcJNI_delete_1jOsiClpSolverInterface(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OsiClpSolverInterface *arg1 = (OsiClpSolverInterface *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OsiClpSolverInterface **)&jarg1; 
  delete_jOsiClpSolverInterface(arg1);
}


SWIGEXPORT void JNICALL Java_src_jCbcJNI_jOsiClpSolverInterface_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OsiClpSolverInterface *arg1 = (OsiClpSolverInterface *) 0 ;
  OsiClpSolverInterface arg2 ;
  OsiClpSolverInterface *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OsiClpSolverInterface **)&jarg1; 
  argp2 = *(OsiClpSolverInterface **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OsiClpSolverInterface");
    return ;
  }
  arg2 = *argp2; 
  jOsiClpSolverInterface_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_src_jCbcJNI_jOsiClpSolverInterface_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OsiClpSolverInterface *arg1 = (OsiClpSolverInterface *) 0 ;
  OsiClpSolverInterface result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OsiClpSolverInterface **)&jarg1; 
  result = jOsiClpSolverInterface_value(arg1);
  *(OsiClpSolverInterface **)&jresult = new OsiClpSolverInterface((const OsiClpSolverInterface &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_src_jCbcJNI_new_1jCoinPackedMatrix(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CoinPackedMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CoinPackedMatrix *)new_jCoinPackedMatrix();
  *(CoinPackedMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_src_jCbcJNI_copy_1jCoinPackedMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  CoinPackedMatrix arg1 ;
  CoinPackedMatrix *argp1 ;
  CoinPackedMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(CoinPackedMatrix **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null CoinPackedMatrix");
    return 0;
  }
  arg1 = *argp1; 
  result = (CoinPackedMatrix *)copy_jCoinPackedMatrix(arg1);
  *(CoinPackedMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_src_jCbcJNI_delete_1jCoinPackedMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CoinPackedMatrix *arg1 = (CoinPackedMatrix *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CoinPackedMatrix **)&jarg1; 
  delete_jCoinPackedMatrix(arg1);
}


SWIGEXPORT void JNICALL Java_src_jCbcJNI_jCoinPackedMatrix_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  CoinPackedMatrix *arg1 = (CoinPackedMatrix *) 0 ;
  CoinPackedMatrix arg2 ;
  CoinPackedMatrix *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CoinPackedMatrix **)&jarg1; 
  argp2 = *(CoinPackedMatrix **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null CoinPackedMatrix");
    return ;
  }
  arg2 = *argp2; 
  jCoinPackedMatrix_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_src_jCbcJNI_jCoinPackedMatrix_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  CoinPackedMatrix *arg1 = (CoinPackedMatrix *) 0 ;
  CoinPackedMatrix result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CoinPackedMatrix **)&jarg1; 
  result = jCoinPackedMatrix_value(arg1);
  *(CoinPackedMatrix **)&jresult = new CoinPackedMatrix((const CoinPackedMatrix &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_src_jCbcJNI_addCol(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jstring jarg5, jboolean jarg6) {
  CoinModel *arg1 = (CoinModel *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  bool arg6 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CoinModel **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return ;
  }
  arg6 = jarg6 ? true : false; 
  addCol(arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
}


SWIGEXPORT void JNICALL Java_src_jCbcJNI_addRows_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  CbcModel *arg1 = (CbcModel *) 0 ;
  CoinModel *arg2 = (CoinModel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  arg2 = *(CoinModel **)&jarg2; 
  addRows(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_src_jCbcJNI_addRow(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4, jdouble jarg5, jdouble jarg6, jstring jarg7) {
  CoinModel *arg1 = (CoinModel *) 0 ;
  int arg2 ;
  int *arg3 ;
  double *arg4 ;
  double arg5 ;
  double arg6 ;
  char *arg7 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CoinModel **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return ;
  }
  addRow(arg1,arg2,arg3,arg4,arg5,arg6,(char const *)arg7);
  
  
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
}


SWIGEXPORT void JNICALL Java_src_jCbcJNI_branchAndBound(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CbcModel *arg1 = (CbcModel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  branchAndBound(arg1);
}


SWIGEXPORT void JNICALL Java_src_jCbcJNI_readMps_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  CbcModel *arg1 = (CbcModel *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  readMps(arg1,(char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_src_jCbcJNI_readLp_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  CbcModel *arg1 = (CbcModel *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  readLp(arg1,(char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_src_jCbcJNI_writeMps_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  CbcModel *arg1 = (CbcModel *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  writeMps(arg1,(char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_src_jCbcJNI_writeLp_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  CbcModel *arg1 = (CbcModel *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  writeLp(arg1,(char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong JNICALL Java_src_jCbcJNI_getSol(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  CbcModel *arg1 = (CbcModel *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  result = (double *)getSol(arg1);
  *(double **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_src_jCbcJNI_setInteger_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  CbcModel *arg1 = (CbcModel *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  arg2 = (int)jarg2; 
  setInteger(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_src_jCbcJNI_addRows_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OsiClpSolverInterface *arg1 = (OsiClpSolverInterface *) 0 ;
  CoinModel *arg2 = (CoinModel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OsiClpSolverInterface **)&jarg1; 
  arg2 = *(CoinModel **)&jarg2; 
  addRows(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_src_jCbcJNI_assignSolver(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  CbcModel *arg1 = (CbcModel *) 0 ;
  OsiClpSolverInterface *arg2 = (OsiClpSolverInterface *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  arg2 = *(OsiClpSolverInterface **)&jarg2; 
  assignSolver(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_src_jCbcJNI_readMps_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OsiClpSolverInterface *arg1 = (OsiClpSolverInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OsiClpSolverInterface **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  readMps(arg1,(char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_src_jCbcJNI_readLp_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OsiClpSolverInterface *arg1 = (OsiClpSolverInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OsiClpSolverInterface **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  readLp(arg1,(char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_src_jCbcJNI_setInteger_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OsiClpSolverInterface *arg1 = (OsiClpSolverInterface *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OsiClpSolverInterface **)&jarg1; 
  arg2 = (int)jarg2; 
  setInteger(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_src_jCbcJNI_initialSolve(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OsiClpSolverInterface *arg1 = (OsiClpSolverInterface *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OsiClpSolverInterface **)&jarg1; 
  initialSolve(arg1);
}


SWIGEXPORT void JNICALL Java_src_jCbcJNI_setLogLevel_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OsiClpSolverInterface *arg1 = (OsiClpSolverInterface *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OsiClpSolverInterface **)&jarg1; 
  arg2 = (int)jarg2; 
  setLogLevel(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_src_jCbcJNI_setLogLevel_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  CbcModel *arg1 = (CbcModel *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  arg2 = (int)jarg2; 
  setLogLevel(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_src_jCbcJNI_writeMps_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OsiClpSolverInterface *arg1 = (OsiClpSolverInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OsiClpSolverInterface **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  writeMps(arg1,(char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_src_jCbcJNI_writeLp_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OsiClpSolverInterface *arg1 = (OsiClpSolverInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OsiClpSolverInterface **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  writeLp(arg1,(char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_src_jCbcJNI_solve_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  CbcModel *arg1 = (CbcModel *) 0 ;
  OsiClpSolverInterface *arg2 = (OsiClpSolverInterface *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  arg2 = *(OsiClpSolverInterface **)&jarg2; 
  arg3 = (int)jarg3; 
  solve(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_src_jCbcJNI_solve_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  CbcModel *arg1 = (CbcModel *) 0 ;
  OsiClpSolverInterface *arg2 = (OsiClpSolverInterface *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  arg2 = *(OsiClpSolverInterface **)&jarg2; 
  solve(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_src_jCbcJNI_solve_11_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  CbcModel *arg1 = (CbcModel *) 0 ;
  OsiClpSolverInterface *arg2 = (OsiClpSolverInterface *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  arg2 = *(OsiClpSolverInterface **)&jarg2; 
  arg3 = (int)jarg3; 
  solve_1(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_src_jCbcJNI_solve_11_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  CbcModel *arg1 = (CbcModel *) 0 ;
  OsiClpSolverInterface *arg2 = (OsiClpSolverInterface *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  arg2 = *(OsiClpSolverInterface **)&jarg2; 
  solve_1(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_src_jCbcJNI_solve_12_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  CbcModel *arg1 = (CbcModel *) 0 ;
  OsiClpSolverInterface *arg2 = (OsiClpSolverInterface *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  arg2 = *(OsiClpSolverInterface **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)solve_2(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_src_jCbcJNI_solve_12_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  CbcModel *arg1 = (CbcModel *) 0 ;
  OsiClpSolverInterface *arg2 = (OsiClpSolverInterface *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  arg2 = *(OsiClpSolverInterface **)&jarg2; 
  result = (int)solve_2(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_src_jCbcJNI_solve_13_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3, jdouble jarg4) {
  jint jresult = 0 ;
  CbcModel *arg1 = (CbcModel *) 0 ;
  OsiClpSolverInterface *arg2 = (OsiClpSolverInterface *) 0 ;
  int arg3 ;
  double arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  arg2 = *(OsiClpSolverInterface **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (double)jarg4; 
  result = (int)solve_3(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_src_jCbcJNI_solve_13_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  CbcModel *arg1 = (CbcModel *) 0 ;
  OsiClpSolverInterface *arg2 = (OsiClpSolverInterface *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  arg2 = *(OsiClpSolverInterface **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)solve_3(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_src_jCbcJNI_solve_13_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  CbcModel *arg1 = (CbcModel *) 0 ;
  OsiClpSolverInterface *arg2 = (OsiClpSolverInterface *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  arg2 = *(OsiClpSolverInterface **)&jarg2; 
  result = (int)solve_3(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_src_jCbcJNI_isInteger_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  OsiClpSolverInterface *arg1 = (OsiClpSolverInterface *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OsiClpSolverInterface **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)isInteger(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_src_jCbcJNI_isInteger_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  CbcModel *arg1 = (CbcModel *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)isInteger(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_src_jCbcJNI_getRowName_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  OsiClpSolverInterface *arg1 = (OsiClpSolverInterface *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OsiClpSolverInterface **)&jarg1; 
  arg2 = (int)jarg2; 
  result = getRowName(arg1,arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_src_jCbcJNI_getColName_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  OsiClpSolverInterface *arg1 = (OsiClpSolverInterface *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OsiClpSolverInterface **)&jarg1; 
  arg2 = (int)jarg2; 
  result = getColName(arg1,arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_src_jCbcJNI_getRowName_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  CbcModel *arg1 = (CbcModel *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  arg2 = (int)jarg2; 
  result = getRowName(arg1,arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_src_jCbcJNI_getColName_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  CbcModel *arg1 = (CbcModel *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  arg2 = (int)jarg2; 
  result = getColName(arg1,arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_src_jCbcJNI_getNumRows_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OsiClpSolverInterface *arg1 = (OsiClpSolverInterface *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OsiClpSolverInterface **)&jarg1; 
  result = (int)getNumRows(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_src_jCbcJNI_getNumCols_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OsiClpSolverInterface *arg1 = (OsiClpSolverInterface *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OsiClpSolverInterface **)&jarg1; 
  result = (int)getNumCols(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_src_jCbcJNI_getNumRows_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  CbcModel *arg1 = (CbcModel *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  result = (int)getNumRows(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_src_jCbcJNI_getNumCols_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  CbcModel *arg1 = (CbcModel *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  result = (int)getNumCols(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_src_jCbcJNI_getColSolution_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OsiClpSolverInterface *arg1 = (OsiClpSolverInterface *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OsiClpSolverInterface **)&jarg1; 
  result = (double *)getColSolution(arg1);
  *(double **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_src_jCbcJNI_getRowPrice_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OsiClpSolverInterface *arg1 = (OsiClpSolverInterface *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OsiClpSolverInterface **)&jarg1; 
  result = (double *)getRowPrice(arg1);
  *(double **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_src_jCbcJNI_getRowActivity_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OsiClpSolverInterface *arg1 = (OsiClpSolverInterface *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OsiClpSolverInterface **)&jarg1; 
  result = (double *)getRowActivity(arg1);
  *(double **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_src_jCbcJNI_getReducedCost_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OsiClpSolverInterface *arg1 = (OsiClpSolverInterface *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OsiClpSolverInterface **)&jarg1; 
  result = (double *)getReducedCost(arg1);
  *(double **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_src_jCbcJNI_getColSolution_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  CbcModel *arg1 = (CbcModel *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  result = (double *)getColSolution(arg1);
  *(double **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_src_jCbcJNI_getRowPrice_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  CbcModel *arg1 = (CbcModel *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  result = (double *)getRowPrice(arg1);
  *(double **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_src_jCbcJNI_getRowActivity_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  CbcModel *arg1 = (CbcModel *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  result = (double *)getRowActivity(arg1);
  *(double **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_src_jCbcJNI_getReducedCost_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  CbcModel *arg1 = (CbcModel *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  result = (double *)getReducedCost(arg1);
  *(double **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_src_jCbcJNI_numberIntegers(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  CbcModel *arg1 = (CbcModel *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  result = (int)numberIntegers(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_src_jCbcJNI_getObjValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  CbcModel *arg1 = (CbcModel *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  result = (double)getObjValue(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_src_jCbcJNI_status(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  CbcModel *arg1 = (CbcModel *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  result = (int)status(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_src_jCbcJNI_isProvenOptimal(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  CbcModel *arg1 = (CbcModel *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  result = (int)isProvenOptimal(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_src_jCbcJNI_isProvenInfeasible(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  CbcModel *arg1 = (CbcModel *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  result = (int)isProvenInfeasible(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_src_jCbcJNI_setModelName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OsiClpSolverInterface *arg1 = (OsiClpSolverInterface *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OsiClpSolverInterface **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  setModelName(arg1,arg2);
}


SWIGEXPORT jstring JNICALL Java_src_jCbcJNI_getModelName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OsiClpSolverInterface *arg1 = (OsiClpSolverInterface *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OsiClpSolverInterface **)&jarg1; 
  result = getModelName(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_src_jCbcJNI_isBinary(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  OsiClpSolverInterface *arg1 = (OsiClpSolverInterface *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OsiClpSolverInterface **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)isBinary(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_src_jCbcJNI_secondaryStatus(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  CbcModel *arg1 = (CbcModel *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  result = (int)secondaryStatus(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_src_jCbcJNI_getCoinCpuTime(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)getCoinCpuTime();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_src_jCbcJNI_getObjValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OsiClpSolverInterface *arg1 = (OsiClpSolverInterface *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OsiClpSolverInterface **)&jarg1; 
  result = (double)getObjValue(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_src_jCbcJNI_setRowName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jstring jarg3) {
  OsiClpSolverInterface *arg1 = (OsiClpSolverInterface *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OsiClpSolverInterface **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  setRowName(arg1,arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_src_jCbcJNI_setPrimalTolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  CbcModel *arg1 = (CbcModel *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  arg2 = (double)jarg2; 
  setPrimalTolerance(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_src_jCbcJNI_setDualTolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  CbcModel *arg1 = (CbcModel *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  arg2 = (double)jarg2; 
  setDualTolerance(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_src_jCbcJNI_setIntegerTolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  CbcModel *arg1 = (CbcModel *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  arg2 = (double)jarg2; 
  setIntegerTolerance(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_src_jCbcJNI_solve_1whs_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jint jarg5, jint jarg6, jdouble jarg7) {
  jint jresult = 0 ;
  CbcModel *arg1 = (CbcModel *) 0 ;
  OsiClpSolverInterface *arg2 = (OsiClpSolverInterface *) 0 ;
  std::string *arg3 ;
  int *arg4 ;
  int arg5 ;
  int arg6 ;
  double arg7 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  arg2 = *(OsiClpSolverInterface **)&jarg2; 
  arg3 = *(std::string **)&jarg3; 
  arg4 = *(int **)&jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (double)jarg7; 
  result = (int)solve_whs(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jint)result; 
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_src_jCbcJNI_solve_1whs_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jint jarg5, jint jarg6) {
  jint jresult = 0 ;
  CbcModel *arg1 = (CbcModel *) 0 ;
  OsiClpSolverInterface *arg2 = (OsiClpSolverInterface *) 0 ;
  std::string *arg3 ;
  int *arg4 ;
  int arg5 ;
  int arg6 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  arg2 = *(OsiClpSolverInterface **)&jarg2; 
  arg3 = *(std::string **)&jarg3; 
  arg4 = *(int **)&jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = (int)solve_whs(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_src_jCbcJNI_solve_1whs_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jint jarg5) {
  jint jresult = 0 ;
  CbcModel *arg1 = (CbcModel *) 0 ;
  OsiClpSolverInterface *arg2 = (OsiClpSolverInterface *) 0 ;
  std::string *arg3 ;
  int *arg4 ;
  int arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  arg2 = *(OsiClpSolverInterface **)&jarg2; 
  arg3 = *(std::string **)&jarg3; 
  arg4 = *(int **)&jarg4; 
  arg5 = (int)jarg5; 
  result = (int)solve_whs(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_src_jCbcJNI_getNumIntegers(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OsiClpSolverInterface *arg1 = (OsiClpSolverInterface *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OsiClpSolverInterface **)&jarg1; 
  result = (int)getNumIntegers(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_src_jCbcJNI_writeLp1_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jdouble jarg3, jint jarg4) {
  CbcModel *arg1 = (CbcModel *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (double)jarg3; 
  arg4 = (int)jarg4; 
  writeLp1(arg1,(char const *)arg2,arg3,arg4);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_src_jCbcJNI_writeLp1_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jdouble jarg3) {
  CbcModel *arg1 = (CbcModel *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (double)jarg3; 
  writeLp1(arg1,(char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_src_jCbcJNI_writeLp1_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  CbcModel *arg1 = (CbcModel *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  writeLp1(arg1,(char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_src_jCbcJNI_writeMps1_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3, jint jarg4, jdouble jarg5) {
  CbcModel *arg1 = (CbcModel *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  double arg5 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (double)jarg5; 
  writeMps1(arg1,(char const *)arg2,arg3,arg4,arg5);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_src_jCbcJNI_writeMps1_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3, jint jarg4) {
  CbcModel *arg1 = (CbcModel *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  writeMps1(arg1,(char const *)arg2,arg3,arg4);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_src_jCbcJNI_writeMps1_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3) {
  CbcModel *arg1 = (CbcModel *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (int)jarg3; 
  writeMps1(arg1,(char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_src_jCbcJNI_writeMps1_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  CbcModel *arg1 = (CbcModel *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  writeMps1(arg1,(char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_src_jCbcJNI_callCbc(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  std::string arg1 ;
  CbcModel *arg2 = (CbcModel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(CbcModel **)&jarg2; 
  callCbc(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_src_jCbcJNI_setMaximumNodes(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  CbcModel *arg1 = (CbcModel *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  arg2 = (int)jarg2; 
  setMaximumNodes(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_src_jCbcJNI_setNumberThreads(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  CbcModel *arg1 = (CbcModel *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  arg2 = (int)jarg2; 
  setNumberThreads(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_src_jCbcJNI_setThreadMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  CbcModel *arg1 = (CbcModel *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  arg2 = (int)jarg2; 
  setThreadMode(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_src_jCbcJNI_par_1solve_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jlong jarg4, jlong jarg5, jint jarg6, jlong jarg7, jlong jarg8, jint jarg9, jlong jarg10, jlong jarg11, jint jarg12) {
  CbcModel *arg1 = (CbcModel *) 0 ;
  OsiClpSolverInterface *arg2 = (OsiClpSolverInterface *) 0 ;
  std::string arg3 ;
  std::string *arg4 ;
  int *arg5 ;
  int arg6 ;
  std::string *arg7 ;
  int *arg8 ;
  int arg9 ;
  std::string *arg10 ;
  int *arg11 ;
  int arg12 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  arg2 = *(OsiClpSolverInterface **)&jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(std::string **)&jarg4; 
  arg5 = *(int **)&jarg5; 
  arg6 = (int)jarg6; 
  arg7 = *(std::string **)&jarg7; 
  arg8 = *(int **)&jarg8; 
  arg9 = (int)jarg9; 
  arg10 = *(std::string **)&jarg10; 
  arg11 = *(int **)&jarg11; 
  arg12 = (int)jarg12; 
  par_solve(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  
  
  
  
  
  
}


SWIGEXPORT void JNICALL Java_src_jCbcJNI_par_1solve_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jlong jarg4, jlong jarg5, jint jarg6, jlong jarg7, jlong jarg8, jint jarg9, jlong jarg10, jlong jarg11) {
  CbcModel *arg1 = (CbcModel *) 0 ;
  OsiClpSolverInterface *arg2 = (OsiClpSolverInterface *) 0 ;
  std::string arg3 ;
  std::string *arg4 ;
  int *arg5 ;
  int arg6 ;
  std::string *arg7 ;
  int *arg8 ;
  int arg9 ;
  std::string *arg10 ;
  int *arg11 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  arg2 = *(OsiClpSolverInterface **)&jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(std::string **)&jarg4; 
  arg5 = *(int **)&jarg5; 
  arg6 = (int)jarg6; 
  arg7 = *(std::string **)&jarg7; 
  arg8 = *(int **)&jarg8; 
  arg9 = (int)jarg9; 
  arg10 = *(std::string **)&jarg10; 
  arg11 = *(int **)&jarg11; 
  par_solve(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  
  
  
  
  
  
}


SWIGEXPORT void JNICALL Java_src_jCbcJNI_par_1solve_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jlong jarg4, jlong jarg5, jint jarg6, jlong jarg7, jlong jarg8, jint jarg9, jlong jarg10) {
  CbcModel *arg1 = (CbcModel *) 0 ;
  OsiClpSolverInterface *arg2 = (OsiClpSolverInterface *) 0 ;
  std::string arg3 ;
  std::string *arg4 ;
  int *arg5 ;
  int arg6 ;
  std::string *arg7 ;
  int *arg8 ;
  int arg9 ;
  std::string *arg10 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  arg2 = *(OsiClpSolverInterface **)&jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(std::string **)&jarg4; 
  arg5 = *(int **)&jarg5; 
  arg6 = (int)jarg6; 
  arg7 = *(std::string **)&jarg7; 
  arg8 = *(int **)&jarg8; 
  arg9 = (int)jarg9; 
  arg10 = *(std::string **)&jarg10; 
  par_solve(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  
  
  
  
  
}


SWIGEXPORT void JNICALL Java_src_jCbcJNI_par_1solve_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jlong jarg4, jlong jarg5, jint jarg6, jlong jarg7, jlong jarg8, jint jarg9) {
  CbcModel *arg1 = (CbcModel *) 0 ;
  OsiClpSolverInterface *arg2 = (OsiClpSolverInterface *) 0 ;
  std::string arg3 ;
  std::string *arg4 ;
  int *arg5 ;
  int arg6 ;
  std::string *arg7 ;
  int *arg8 ;
  int arg9 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  arg2 = *(OsiClpSolverInterface **)&jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(std::string **)&jarg4; 
  arg5 = *(int **)&jarg5; 
  arg6 = (int)jarg6; 
  arg7 = *(std::string **)&jarg7; 
  arg8 = *(int **)&jarg8; 
  arg9 = (int)jarg9; 
  par_solve(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  
  
  
  
}


SWIGEXPORT void JNICALL Java_src_jCbcJNI_par_1solve_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jlong jarg4, jlong jarg5, jint jarg6, jlong jarg7, jlong jarg8) {
  CbcModel *arg1 = (CbcModel *) 0 ;
  OsiClpSolverInterface *arg2 = (OsiClpSolverInterface *) 0 ;
  std::string arg3 ;
  std::string *arg4 ;
  int *arg5 ;
  int arg6 ;
  std::string *arg7 ;
  int *arg8 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  arg2 = *(OsiClpSolverInterface **)&jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(std::string **)&jarg4; 
  arg5 = *(int **)&jarg5; 
  arg6 = (int)jarg6; 
  arg7 = *(std::string **)&jarg7; 
  arg8 = *(int **)&jarg8; 
  par_solve(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  
  
  
  
}


SWIGEXPORT void JNICALL Java_src_jCbcJNI_par_1solve_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jlong jarg4, jlong jarg5, jint jarg6, jlong jarg7) {
  CbcModel *arg1 = (CbcModel *) 0 ;
  OsiClpSolverInterface *arg2 = (OsiClpSolverInterface *) 0 ;
  std::string arg3 ;
  std::string *arg4 ;
  int *arg5 ;
  int arg6 ;
  std::string *arg7 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  arg2 = *(OsiClpSolverInterface **)&jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(std::string **)&jarg4; 
  arg5 = *(int **)&jarg5; 
  arg6 = (int)jarg6; 
  arg7 = *(std::string **)&jarg7; 
  par_solve(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  
  
  
}


SWIGEXPORT void JNICALL Java_src_jCbcJNI_par_1solve_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jlong jarg4, jlong jarg5, jint jarg6) {
  CbcModel *arg1 = (CbcModel *) 0 ;
  OsiClpSolverInterface *arg2 = (OsiClpSolverInterface *) 0 ;
  std::string arg3 ;
  std::string *arg4 ;
  int *arg5 ;
  int arg6 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  arg2 = *(OsiClpSolverInterface **)&jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(std::string **)&jarg4; 
  arg5 = *(int **)&jarg5; 
  arg6 = (int)jarg6; 
  par_solve(arg1,arg2,arg3,arg4,arg5,arg6);
  
  
}


SWIGEXPORT void JNICALL Java_src_jCbcJNI_par_1solve_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jlong jarg4, jlong jarg5) {
  CbcModel *arg1 = (CbcModel *) 0 ;
  OsiClpSolverInterface *arg2 = (OsiClpSolverInterface *) 0 ;
  std::string arg3 ;
  std::string *arg4 ;
  int *arg5 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  arg2 = *(OsiClpSolverInterface **)&jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(std::string **)&jarg4; 
  arg5 = *(int **)&jarg5; 
  par_solve(arg1,arg2,arg3,arg4,arg5);
  
  
}


SWIGEXPORT void JNICALL Java_src_jCbcJNI_par_1solve_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jlong jarg4) {
  CbcModel *arg1 = (CbcModel *) 0 ;
  OsiClpSolverInterface *arg2 = (OsiClpSolverInterface *) 0 ;
  std::string arg3 ;
  std::string *arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  arg2 = *(OsiClpSolverInterface **)&jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(std::string **)&jarg4; 
  par_solve(arg1,arg2,arg3,arg4);
  
}


SWIGEXPORT void JNICALL Java_src_jCbcJNI_par_1solve_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3) {
  CbcModel *arg1 = (CbcModel *) 0 ;
  OsiClpSolverInterface *arg2 = (OsiClpSolverInterface *) 0 ;
  std::string arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  arg2 = *(OsiClpSolverInterface **)&jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  par_solve(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_src_jCbcJNI_cutoff(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  CbcModel *arg1 = (CbcModel *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  arg2 = (int)jarg2; 
  cutoff(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_src_jCbcJNI_solve_1unified_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jint jarg5, jint jarg6) {
  jint jresult = 0 ;
  CbcModel *arg1 = (CbcModel *) 0 ;
  OsiClpSolverInterface *arg2 = (OsiClpSolverInterface *) 0 ;
  std::string *arg3 ;
  int *arg4 ;
  int arg5 ;
  int arg6 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  arg2 = *(OsiClpSolverInterface **)&jarg2; 
  arg3 = *(std::string **)&jarg3; 
  arg4 = *(int **)&jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = (int)solve_unified(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_src_jCbcJNI_solve_1unified_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jint jarg5) {
  jint jresult = 0 ;
  CbcModel *arg1 = (CbcModel *) 0 ;
  OsiClpSolverInterface *arg2 = (OsiClpSolverInterface *) 0 ;
  std::string *arg3 ;
  int *arg4 ;
  int arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  arg2 = *(OsiClpSolverInterface **)&jarg2; 
  arg3 = *(std::string **)&jarg3; 
  arg4 = *(int **)&jarg4; 
  arg5 = (int)jarg5; 
  result = (int)solve_unified(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_src_jCbcJNI_solve_1unified_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  CbcModel *arg1 = (CbcModel *) 0 ;
  OsiClpSolverInterface *arg2 = (OsiClpSolverInterface *) 0 ;
  std::string *arg3 ;
  int *arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  arg2 = *(OsiClpSolverInterface **)&jarg2; 
  arg3 = *(std::string **)&jarg3; 
  arg4 = *(int **)&jarg4; 
  result = (int)solve_unified(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_src_jCbcJNI_solve_1unified_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  CbcModel *arg1 = (CbcModel *) 0 ;
  OsiClpSolverInterface *arg2 = (OsiClpSolverInterface *) 0 ;
  std::string *arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  arg2 = *(OsiClpSolverInterface **)&jarg2; 
  arg3 = *(std::string **)&jarg3; 
  result = (int)solve_unified(arg1,arg2,arg3);
  jresult = (jint)result; 
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_src_jCbcJNI_solve_1unified_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  CbcModel *arg1 = (CbcModel *) 0 ;
  OsiClpSolverInterface *arg2 = (OsiClpSolverInterface *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CbcModel **)&jarg1; 
  arg2 = *(OsiClpSolverInterface **)&jarg2; 
  result = (int)solve_unified(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_src_jCbcJNI_getMinRHS(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OsiClpSolverInterface *arg1 = (OsiClpSolverInterface *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OsiClpSolverInterface **)&jarg1; 
  result = (double)getMinRHS(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_src_jCbcJNI_getMinCoeff(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OsiClpSolverInterface *arg1 = (OsiClpSolverInterface *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OsiClpSolverInterface **)&jarg1; 
  result = (double)getMinCoeff(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_src_jCbcJNI_getMaxCoeff(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OsiClpSolverInterface *arg1 = (OsiClpSolverInterface *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OsiClpSolverInterface **)&jarg1; 
  result = (double)getMaxCoeff(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


#ifdef __cplusplus
}
#endif

